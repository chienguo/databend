query T
SELECT json_strip_nulls(parse_json('null'))
----
null

query T
SELECT json_strip_nulls(parse_json('true'))
----
true

query T
SELECT json_strip_nulls(parse_json('[1,2,3,null]'))
----
[1,2,3,null]

query T
SELECT json_strip_nulls(parse_json('{"a":1,"b":null,"c":{"a":1,"b":null},"d":[{"a":1,"b":null},{"a":2,"b":3}]}'))
----
{"a":1,"c":{"a":1},"d":[{"a":1},{"a":2,"b":3}]}

query T
SELECT json_typeof(parse_json(NULL))
----
NULL

query T
SELECT json_typeof(parse_json('null'))
----
NULL_VALUE

query T
SELECT json_typeof(parse_json('true'))
----
BOOLEAN

query T
SELECT json_typeof(parse_json('"test"'))
----
STRING

query T
SELECT json_typeof(parse_json('-1.12'))
----
DECIMAL

query T
SELECT json_typeof(parse_json('[1,2,3]'))
----
ARRAY

query T
SELECT json_typeof(parse_json('{"a":1,"b":2}'))
----
OBJECT

query T
SELECT json_array()
----
[]

query T
SELECT json_array(true, 1, 'str', [1,2], {'k':'v'}, null)
----
[true,1,"str",[1,2],{"k":"v"},null]

query T
SELECT json_object()
----
{}

query T
SELECT json_object('k1', 1, 'k2', 'str', 'k3', [1,2], 'k4', {'k':'v'}, 'k5', null)
----
{"k1":1,"k2":"str","k3":[1,2],"k4":{"k":"v"}}

statement error 1006
SELECT json_object('k1', 1, 'k2', 'str', 'k3')

query T
SELECT try_json_object('k1', 1, 'k2', 'str', 'k3', [1,2], 'k4', {'k':'v'}, 'k5', null)
----
{"k1":1,"k2":"str","k3":[1,2],"k4":{"k":"v"}}

query T
SELECT try_json_object('k1', 1, 'k2', 'str', 'k3')
----
NULL

query T
SELECT json_object_keep_null()
----
{}

query T
SELECT json_object_keep_null('k1', 1, 'k2', 'str', 'k3', [1,2], 'k4', {'k':'v'}, 'k5', null)
----
{"k1":1,"k2":"str","k3":[1,2],"k4":{"k":"v"},"k5":null}

statement error 1006
SELECT json_object_keep_null('k1', 1, 'k2', 'str', 'k3')

query T
SELECT try_json_object_keep_null('k1', 1, 'k2', 'str', 'k3', [1,2], 'k4', {'k':'v'}, 'k5', null)
----
{"k1":1,"k2":"str","k3":[1,2],"k4":{"k":"v"},"k5":null}

query T
SELECT try_json_object_keep_null('k1', 1, 'k2', 'str', 'k3')
----
NULL

statement ok
DROP TABLE IF EXISTS t1

statement ok
CREATE TABLE t1(id Int, tag String NULL)

statement ok
INSERT INTO t1(id, tag) VALUES(1, 'a'), (2, 'b'), (3, 'c'), (4, 'null'), (5, NULL)

query T
SELECT json_array(id, tag) FROM t1
----
[1,"a"]
[2,"b"]
[3,"c"]
[4,"null"]
[5,null]

query T
SELECT json_object('id', id, 'tag', tag) FROM t1
----
{"id":1,"tag":"a"}
{"id":2,"tag":"b"}
{"id":3,"tag":"c"}
{"id":4,"tag":"null"}
{"id":5}

query T
SELECT json_object_keep_null('id', id, 'tag', tag) FROM t1
----
{"id":1,"tag":"a"}
{"id":2,"tag":"b"}
{"id":3,"tag":"c"}
{"id":4,"tag":"null"}
{"id":5,"tag":null}

statement ok
DROP TABLE IF EXISTS t1

query T
SELECT json_path_exists(NULL, '$.a')
----
NULL

query T
SELECT json_path_exists(parse_json('{"a": 1, "b": 2}'), NULL)
----
NULL

query T
SELECT json_path_exists(parse_json('{"a": 1, "b": 2}'), '$.a')
----
1

query T
SELECT json_path_exists(parse_json('{"a": 1, "b": 2}'), '$.c')
----
0

query T
SELECT json_path_exists(parse_json('{"a": 1, "b": 2}'), '$.a ? (@ == 1)')
----
1

query T
SELECT json_path_exists(parse_json('{"a": 1, "b": 2}'), '$.a ? (@ > 1)')
----
0

query T
SELECT json_path_exists(parse_json('{"a": 1, "b": [1,2,3]}'), '$.b[0]')
----
1

query T
SELECT json_path_exists(parse_json('{"a": 1, "b": [1,2,3]}'), '$.b[3]')
----
0

query T
SELECT json_path_exists(parse_json('{"a": 1, "b": [1,2,3]}'), '$.b[1 to last] ? (@ >=2 && @ <=3)')
----
1

query T
SELECT NULL @? '$.a'
----
NULL

query T
SELECT parse_json('{"a": 1, "b": 2}') @? NULL
----
NULL

query T
SELECT parse_json('{"a": 1, "b": 2}') @? '$.a'
----
1

query T
SELECT parse_json('{"a": 1, "b": 2}') @? '$.c'
----
0

query T
SELECT parse_json('{"a": 1, "b": 2}') @? '$.a ? (@ == 1)'
----
1

query T
SELECT parse_json('{"a": 1, "b": 2}') @? '$.a ? (@ > 1)'
----
0

query T
SELECT parse_json('{"a": 1, "b": [1,2,3]}') @? '$.b[0]'
----
1

query T
SELECT parse_json('{"a": 1, "b": [1,2,3]}') @? '$.b[3]'
----
0

query T
SELECT parse_json('{"a": 1, "b": [1,2,3]}') @? '$.b[1 to last] ? (@ >=2 && @ <=3)'
----
1

query T
SELECT json_path_match(parse_json('{"a":1,"b":2}'), '$.a == 1')
----
1

query T
SELECT json_path_match(parse_json('{"a":1,"b":2}'), '$.a > 1')
----
0

query T
SELECT json_path_match(parse_json('{"a":1,"b":2}'), '$.c > 0')
----
0

query T
SELECT json_path_match(parse_json('{"a":1,"b":2}'), '$.b < 2')
----
0

query T
SELECT json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[0] == 1')
----
1

query T
SELECT json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[0] > 1')
----
0

query T
SELECT json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[3] == 0')
----
0

query T
SELECT json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[1 to last] >= 2')
----
1

query T
SELECT json_path_match(parse_json('{"a":1,"b":[1,2,3]}'), '$.b[1 to last] == 2 || $.b[1 to last] == 3')
----
1

query T
SELECT parse_json('{"a":1,"b":2}') @@ '$.a == 1'
----
1

query T
SELECT parse_json('{"a":1,"b":2}') @@ '$.a > 1'
----
0

query T
SELECT parse_json('{"a":1,"b":2}') @@ '$.c > 0'
----
0

query T
SELECT parse_json('{"a":1,"b":2}') @@ '$.b < 2'
----
0

query T
SELECT parse_json('{"a":1,"b":[1,2,3]}') @@ '$.b[0] == 1'
----
1

query T
SELECT parse_json('{"a":1,"b":[1,2,3]}') @@ '$.b[0] > 1'
----
0

query T
SELECT parse_json('{"a":1,"b":[1,2,3]}') @@ '$.b[3] == 0'
----
0

query T
SELECT parse_json('{"a":1,"b":[1,2,3]}') @@ '$.b[1 to last] >= 2'
----
1

query T
SELECT parse_json('{"a":1,"b":[1,2,3]}') @@ '$.b[1 to last] == 2 || $.b[1 to last] == 3'
----
1

query T
SELECT json_each(NULL)
----

query T
SELECT json_each(parse_json('null'))
----

query T
SELECT json_each(parse_json('true'))
----

query T
SELECT json_each(parse_json('[1, 2, 3]'))
----

query T
SELECT json_each(parse_json('{}'))
----

query T
SELECT json_each(parse_json('{"a": 1, "b": [1,2,3], "c": true, "d": {"k1": 1, "k2": 2}}'))
----
('a','1')
('b','[1,2,3]')
('c','true')
('d','{"k1":1,"k2":2}')

query TT
SELECT parse_json('{"k1": "v1", "k2": "v2"}') config, json_each(config)
----
{"k1":"v1","k2":"v2"} ('k1','"v1"')
{"k1":"v1","k2":"v2"} ('k2','"v2"')

query TT
SELECT * FROM json_each(parse_json('{"a": 1, "b": [1,2,3], "c": true, "d": {"k1": 1, "k2": 2}}'))
----
a 1
b [1,2,3]
c true
d {"k1":1,"k2":2}

query T
SELECT json_array_elements(NULL)
----

query T
SELECT json_array_elements(parse_json('null'))
----

query T
SELECT json_array_elements(parse_json('true'))
----

query T
SELECT json_array_elements(parse_json('[]'))
----

query T
SELECT json_array_elements(parse_json('[1, 2, 3]'))
----
1
2
3

query TT
SELECT parse_json('{"k": [1, 2, 3]}') config, json_array_elements(config:k)
----
{"k":[1,2,3]} 1
{"k":[1,2,3]} 2
{"k":[1,2,3]} 3

query T
SELECT json_array_elements(parse_json('{"a": 1, "b": [1,2,3], "c": true, "d": {"k1": 1, "k2": 2}}'))
----

query T
SELECT json_array_elements(parse_json('[1, [1,2,3], true, {"k1": 1, "k2": 2}]'))
----
1
[1,2,3]
true
{"k1":1,"k2":2}

query T
SELECT * FROM json_array_elements(parse_json('[1, [1,2,3], true, {"k1": 1, "k2": 2}]'))
----
1
[1,2,3]
true
{"k1":1,"k2":2}

query T
select parse_json('["1","2","3"]') ? NULL
----
NULL

query T
select parse_json('"string"') ? '1'
----
0

query T
select parse_json('["1","2","3"]') ? '1'
----
1

query T
select parse_json('{"a":1,"b":2,"c":3}') ? 'b'
----
1

query T
select parse_json('["1","2","3"]') ? '4'
----
0

query T
select parse_json('{"a":1,"b":2,"c":3}') ? 'd'
----
0

query T
select parse_json('["1","2","3"]') ?| NULL
----
NULL

query T
select parse_json('"string"') ?| ['1','2']
----
0

query T
select parse_json('["1","2","3"]') ?| ['1','4']
----
1

query T
select parse_json('{"a":1,"b":2,"c":3}') ?| ['b','e']
----
1

query T
select parse_json('["1","2","3"]') ?| ['4','5']
----
0

query T
select parse_json('{"a":1,"b":2,"c":3}') ?| ['d','e']
----
0

query T
select parse_json('["1","2","3"]') ?& NULL
----
NULL

query T
select parse_json('"string"') ?& ['1','2']
----
0

query T
select parse_json('["1","2","3"]') ?& ['1','3']
----
1

query T
select parse_json('{"a":1,"b":2,"c":3}') ?& ['b','c']
----
1

query T
select parse_json('["1","2","3"]') ?& ['3','5']
----
0

query T
select parse_json('{"a":1,"b":2,"c":3}') ?& ['c','d']
----
0


statement ok
DROP TABLE IF EXISTS t2

statement ok
CREATE TABLE t2(id Int, v Variant NULL);


statement ok
INSERT INTO t2(id, v) VALUES (1, parse_json('true')), (2, parse_json('{"a":1,"b":2,"c":3}')), (3, '["b","c","e"]'), (4, NULL)


query T
select id, v ? 'a' from t2 order by id
----
1 0
2 1
3 0
4 NULL

query T
select id, v ?| ['a','d'] from t2 order by id
----
1 0
2 1
3 0
4 NULL

query T
select id, v ?& ['a','c'] from t2 order by id
----
1 0
2 1
3 0
4 NULL


query T
select id, v @? '$.b' from t2 order by id
----
1 0
2 1
3 0
4 NULL

query T
select id, v @@ '$[*] == "b"' from t2 order by id
----
1 NULL
2 NULL
3 1
4 NULL

statement ok
DROP TABLE IF EXISTS t2

query T
select NULL @> NULL;
----
NULL

query T
select parse_json('[1,2,3]') @> NULL;
----
NULL

query T
select NULL @> parse_json('1');
----
NULL

query T
select parse_json('true') @> parse_json('true');
----
1

query T
select parse_json('true') @> parse_json('false');
----
0

query T
select parse_json('"asd"') @> parse_json('"asd"');
----
1

query T
select parse_json('"asd"') @> parse_json('"asdd"');
----
0

query T
select parse_json('[1,2,3]') @> parse_json('1');
----
1

query T
select parse_json('[1,2,3]') @> parse_json('4');
----
0

query T
select parse_json('[1,2,3,4]') @> parse_json('[2,1,3]');
----
1

query T
select parse_json('[1,2,3,4]') @> parse_json('[2,1,1]');
----
1

query T
select parse_json('[1,2,[1,3]]') @> parse_json('[1,3]');
----
0

query T
select parse_json('[1,2,[1,3]]') @> parse_json('[[1,3]]');
----
1

query T
select parse_json('[1,2,[1,3]]') @> parse_json('[[[1,3]]]');
----
0

query T
select parse_json('[{"a":1}]') @> parse_json('{"a":1}');
----
0

query T
select parse_json('[{"a":1},{"b":2}]') @> parse_json('[{"a":1}]');
----
1

query T
select parse_json('{"a":1,"b":2}') @> parse_json('{"a":1}');
----
1

query T
select parse_json('{"a":1,"b":2}') @> parse_json('{"a":2}');
----
0

query T
select parse_json('{"z":2,"b":{"a":1}}') @> parse_json('{"a":1}');
----
0


query T
select parse_json('{"a":{"c":100,"d":200},"b":2}') @> parse_json('{"a":{}}');
----
1

query T
select NULL <@ NULL;
----
NULL

query T
select NULL <@ parse_json('[1,2,3]');
----
NULL

query T
select parse_json('1') <@ NULL;
----
NULL

query T
select parse_json('true') <@ parse_json('true');
----
1

query T
select parse_json('true') <@ parse_json('false');
----
0

query T
select parse_json('"asd"') <@ parse_json('"asd"');
----
1

query T
select parse_json('"asd"') <@ parse_json('"asdd"');
----
0

query T
select parse_json('1') <@ parse_json('[1,2,3]');
----
1

query T
select parse_json('4') <@ parse_json('[1,2,3]');
----
0

query T
select parse_json('[2,1,3]') <@ parse_json('[1,2,3,4]');
----
1

query T
select parse_json('[2,1,1]') <@ parse_json('[1,2,3,4]');
----
1

query T
select parse_json('[1,3]') <@ parse_json('[1,2,[1,3]]');
----
0

query T
select parse_json('[[1,3]]') <@ parse_json('[1,2,[1,3]]');
----
1

query T
select parse_json('[[[1,3]]]') <@ parse_json('[1,2,[1,3]]');
----
0

query T
select parse_json('{"a":1}') <@ parse_json('[{"a":1}]');
----
0

query T
select parse_json('[{"a":1}]') <@ parse_json('[{"a":1},{"b":2}]');
----
1

query T
select parse_json('{"a":1}') <@ parse_json('{"a":1,"b":2}');
----
1

query T
select parse_json('{"a":2}') <@ parse_json('{"a":1,"b":2}');
----
0

query T
select parse_json('{"a":1}') <@ parse_json('{"z":2,"b":{"a":1}}');
----
0

query T
select parse_json('{"a":{}}') <@ parse_json('{"a":{"c":100,"d":200},"b":2}');
----
1

query T
select parse_json('[1,2,3]') || NULL;
----
NULL

query T
select parse_json('[1,2,3]') || parse_json('10');
----
[1,2,3,10]

query T
select parse_json('"asd"') || parse_json('[1,2,3]');
----
["asd",1,2,3]

query T
select parse_json('[1,{"a":1,"b":2,"c":[1,2,3]},3]') || parse_json('"asd"');
----
[1,{"a":1,"b":2,"c":[1,2,3]},3,"asd"]

query T
select parse_json('[1,{"a":1,"b":2,"c":[1,2,3]},3]') || parse_json('[10,20,30]');
----
[1,{"a":1,"b":2,"c":[1,2,3]},3,10,20,30]

query T
select parse_json('[1,[1,2,3],3]') || parse_json('[[10,20,30]]');
----
[1,[1,2,3],3,[10,20,30]]

query T
select parse_json('{"a":1,"b":2}') || parse_json('true');
----
[{"a":1,"b":2},true]

query T
select parse_json('[1,2,3]') || parse_json('{"a":1,"b":2}');
----
[1,2,3,{"a":1,"b":2}]

query T
select parse_json('{"a":1,"b":2}') || parse_json('[1,2,3]');
----
[{"a":1,"b":2},1,2,3]

query T
select parse_json('{"a":1,"b":2}') || parse_json('{"c":3,"d":4}');
----
{"a":1,"b":2,"c":3,"d":4}

query T
select parse_json('{"a":1,"b":2,"d":10}') || parse_json('{"a":3,"b":4}');
----
{"a":3,"b":4,"d":10}

query T
select parse_json('[1,2,3]') - NULL;
----
NULL

query T
select parse_json('[1,2,3]') - '1';
----
[1,2,3]

query T
select parse_json('["1","2","3"]') - '0';
----
["1","2","3"]

query T
select parse_json('["1","2","3"]') - '1';
----
["2","3"]

query T
select parse_json('["1","2","3",{"a":1,"b":2}]') - '1';
----
["2","3",{"a":1,"b":2}]

query T
select parse_json('{"a":1,"b":2}') - 'c';
----
{"a":1,"b":2}

query T
select parse_json('{"a":1,"b":2}') - 'a';
----
{"b":2}

query T
select parse_json('{"b":2}') - 'b';
----
{}

query T
select parse_json('[1,2,3]') - 0;
----
[2,3]

query T
select parse_json('[1,2,3]') - 1;
----
[1,3]

query T
select parse_json('[1,2,3]') - 2;
----
[1,2]

query T
select parse_json('[1,2,3]') - -1;
----
[1,2]

query T
select parse_json('[1,2,3]') - -2;
----
[1,3]

query T
select parse_json('[1,2,3]') - -3;
----
[2,3]

query T
select parse_json('[1,2,3]') - -4;
----
[1,2,3]

query T
select parse_json('[1,2,{"a":[1,2,3],"b":[40,50,60]}]') - 2;
----
[1,2]


query T
select parse_json('[1,2,3]') #- NULL
----
NULL

query T
select parse_json('[1,2,3]') #- '{}'
----
[1,2,3]

query T
select parse_json('[1,2,3]') #- '{0}'
----
[2,3]

query T
select parse_json('[1,2,3]') #- '{-1}'
----
[1,2]

query T
select parse_json('[1,2,3]') #- '{3}'
----
[1,2,3]

query T
select parse_json('{"a":1,"b":[1,2,3]}') #- '{b}'
----
{"a":1}

query T
select parse_json('{"a":1,"b":[1,2,3]}') #- '{c}'
----
{"a":1,"b":[1,2,3]}

query T
select parse_json('{"a":1,"b":[1,2,3]}') #- '{b,2}'
----
{"a":1,"b":[1,2]}

query T
select parse_json('{"a":1,"b":[1,2,3]}') #- '{b,-2}'
----
{"a":1,"b":[1,3]}

query T
select parse_json('{"a":1,"b":[{"c":1,"d":10},2,3]}') #- '{b,0,d}'
----
{"a":1,"b":[{"c":1},2,3]}

statement ok
DROP TABLE IF EXISTS t3

statement ok
CREATE TABLE t3(id Int, v Variant NULL, s String NULL);

statement ok
INSERT INTO t3(id, v, s) VALUES (1, parse_json('[1,2,3]'), '{0}'), (2, parse_json('{"a":1,"b":2,"c":3}'), '{b}'), (3, '[1,{"a":[1,2,3]},3]', '{1,a,-1}'), (4, NULL, NULL)

query T
select id, v #- s from t3 order by id
----
1 [2,3]
2 {"a":1,"c":3}
3 [1,{"a":[1,2]},3]
4 NULL

statement ok
DROP TABLE IF EXISTS t3

# Basic jq usage tests
query T
SELECT * FROM jq('.[] | .', json_object('k1', 'v1', 'k2', 'v2')) ORDER BY 1
----
"v1"
"v2"

query T
SELECT * FROM jq($$[.[] | .]$$, json_object('k1', 'v1', 'k2', 'v2'))
----
["v1","v2"]

# Test with array input
query T
SELECT * FROM jq('.[]', json_array(1, 2, 3))
----
1
2
3

# Test with nested objects
query T
SELECT * FROM jq('.a.b', json_object('a', json_object('b', 'nested_value')))
----
"nested_value"

# Test with array of objects
query T
SELECT * FROM jq('.[].name', json_array(json_object('name', 'Alice'), json_object('name', 'Bob')))
----
"Alice"
"Bob"

# Test with filtering
query T
SELECT * FROM jq('.[] | select(.age > 30)', json_array(json_object('name', 'Alice', 'age', 25), json_object('name', 'Bob', 'age', 35)))
----
{"age":35,"name":"Bob"}

# Test with multiple outputs per input element
query T
SELECT * FROM jq('.[] | .name, .age', json_array(json_object('name', 'Alice', 'age', 25), json_object('name', 'Bob', 'age', 35)))
----
"Alice"
25
"Bob"
35

# Test with NULL input
query T
SELECT * FROM jq('.', NULL)
----

# Test with empty object
query T
SELECT * FROM jq('.', json_object())
----
{}

# Test with empty array
query T
SELECT * FROM jq('.[]', json_array())
----

# Test with invalid jq expression
statement error
SELECT * FROM jq('invalid_expression', json_object('k', 'v'))

# Test with complex transformations
query T
SELECT * FROM jq('{min: min, max: max, sum: add, length: length}', json_array(1, 2, 3, 4, 5))
----
{"length":5,"max":5,"min":1,"sum":15}

# Test with string manipulation
query T
SELECT * FROM jq('.[] | ascii_upcase', json_array('hello', 'world'))
----
"HELLO"
"WORLD"

# Test with numeric operations
query T
SELECT * FROM jq('.[] * 2', json_array(1, 2, 3))
----
2
4
6

# Test with object construction
query T
SELECT * FROM jq('{new_key: .key}', json_object('key', 'value'))
----
{"new_key":"value"}

# Test with array construction
query T
SELECT * FROM jq('[.[] | . * 2]', json_array(1, 2, 3))
----
[2,4,6]

# Test with conditional logic
query T
SELECT * FROM jq('.[] | if . == 0 then "zero" elif . == 1 then "one" else "many" end', json_array(0, 1, 2))
----
"zero"
"one"
"many"

# Test with table and set returning functionality
statement ok
CREATE TABLE test_data (id INT, json_data JSON);

statement ok
INSERT INTO test_data VALUES
    (1, '{"name": "Alice", "scores": [85, 90, 78]}'),
    (2, '{"name": "Bob", "scores": [92, 88, 95]}'),
    (3, '{"name": "Charlie", "scores": [76, 80, 82]}');

query IT
SELECT
    id,
    jq('to_entries[] | {key: .key, value: (.value | tostring)}', json_data) AS jq
FROM
    test_data
ORDER BY jq:key;
----
1 {"key":"name","value":"Alice"}
2 {"key":"name","value":"Bob"}
3 {"key":"name","value":"Charlie"}
1 {"key":"scores","value":"[85,90,78]"}
2 {"key":"scores","value":"[92,88,95]"}
3 {"key":"scores","value":"[76,80,82]"}

statement ok
DROP TABLE test_data;
